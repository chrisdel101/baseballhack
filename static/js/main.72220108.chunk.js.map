{"version":3,"sources":["components/BaseballCard.js","components/page.js","App.js","serviceWorker.js","index.js"],"names":["BaseballCard","props","console","log","react_default","a","createElement","className","concat","image","stats","team","src","name","curve","slider","change","slowcurve","renderData","Page","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","listheading","queryString","parse","window","location","search","components_BaseballCard","parseQueryStr","React","Component","App","page","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72220108.chunk.js","sourcesContent":["import React from 'react';\nimport queryString from 'query-string'\n\nfunction BaseballCard(props){\n    console.log(props)\n    function renderData(props){\n        if(props.image){\n            return(\n                <div className=\"image-card\">\n                    <div className=\"image-container\">\n                        <i className={`team-font bbclub-${props.stats.team}`}></i>\n                        <img className='card-image' src={props.image} />\n                        <div className=\"player-name-container\">\n                            <div className=\"player-name\">\n                                <strong>{props.stats.name}</strong>\n                            </div>\n                            <div className=\"mlb-container\">\n                                <img className=\"mlb\" src=\"https://upload.wikimedia.org/wikipedia/en/thumb/a/a6/Major_League_Baseball_logo.svg/1200px-Major_League_Baseball_logo.svg.png\"/>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            )\n        } else {\n            return(\n                <div className=\"text-card\">\n                    <table>\n                        <tbody>\n                        <tr>\n                        <td>Fourseam</td>\n                        <td>{props.stats.curve}</td>\n                        </tr>\n                        <tr>\n                            <td>Curve</td>\n                            <td>{props.stats.curve}</td>\n                        </tr>\n                        <tr>\n                            <td>Slider</td>\n                            <td>{props.stats.slider}</td>\n                        </tr>\n                        <tr>\n                            <td>Change</td>\n                            <td>{props.stats.change}</td>\n                        </tr>\n                        <tr>\n                            <td>Slowcurve</td>\n                            <td>{props.stats.slowcurve}</td>\n                        </tr>\n                        <tr>\n                            <td>Slowcurve</td>\n                            <td>{props.stats.slowcurve}</td>\n                        </tr>\n                        <tr>\n                            <td>Slowcurve</td>\n                            <td>{props.stats.slowcurve}</td>\n                        </tr>\n                        <tr>\n                            <td>Stat</td>\n                            <td>{props.stats.slowcurve}</td>\n                        </tr>\n                        <tr>\n                            <td>Stat</td>\n                            <td>{props.stats.slowcurve}</td>\n                        </tr>\n                        <tr>\n                            <td>Stat</td>\n                            <td>{props.stats.slowcurve}</td>\n                        </tr>\n                        <tr>\n                            <td>Stat</td>\n                            <td>{props.stats.slowcurve}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            )\n        }\n    }\n    return(\n        <div className={`baseballcard ${props.image  ? 'image-card' : ''}`}>\n            {renderData(props)}\n        </div>\n    )\n}\n\nexport default BaseballCard\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport '../App.css';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport BaseballCard from '../components/BaseballCard'\nimport queryString from 'query-string'\n\n\n\nclass Page extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            listheading: [\"Fourseam\", \"Sinker\", \"Slider\", \"Curve\", \"Slow Curve\", \"Change\"]\n        };\n\t}\n    parseQueryStr(){\n        const parse = queryString.parse(window.location.search)\n        return parse\n    }\n\trender() {\n\t\treturn (\n            <div className=\"page\">\n                <BaseballCard\n                    image=\"https://securea.mlb.com/mlb/images/players/head_shot/477132.jpg\"\n                    stats={this.parseQueryStr()}\n                    />\n                <BaseballCard\n                    stats={this.parseQueryStr()}\n                />\n            </div>\n\t\t)\n\t}\n}\nexport default Page;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Page from './components/page'\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n            <Page />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}